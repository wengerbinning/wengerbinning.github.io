在学习C++之前，我们需要了解数据对象与数据类型。数据对象就是计算机处理的对象,可以是具体的数值、模型抽象等，这些对象都有一个共同的特征，是按照一定方
式存储在内存中的，所以数据对象一定具有内存空间来存储对象；简而言之，数据对象一定有一个标识符和存储对象的内存空间ded

数据对象
=======

* 变量

* 数据类型是描述数据对象在内存空间中的存储方式，包含[基本数据类型](cpp/basic_type.md)、复合数据类型（[指针](cpp/pointer.md)、[数组](cpp/array.md)与[引用](cpp/reference.md)）以及基于内置的数据类型与指针进行扩展的[数组](cpp/array.md)、[结构体](cpp/struct.md)、[联合体](cpp/union.md)、[类](cpp/class.md)、[枚举](cpp/enum.md)等。利用这些方法可以扩展出适合与特定场景的数据类型。

* [字面值](cpp/literal.md)是一类具体的数据值，可以用于直接参与运算或初始化变量或制定函数实参.

## 类型处理

* `typedef`类型别名(type alias)是一个名字，它是某种类型的同义词，使得类型更加简单明了、易于理解。

```c++
// uint是unsigned int的别名。
type unsigned int uint;
```
  
在C++11之后出现了别名声明(alias declaration)来定义类型的别名。

```c++
// uint是unsigned int的别名。
using uint = unsigned int;
```

该机制常应用于指针的别名。

```c++
// string类型是char*类型的别名。
typedef char* string;
```

* `auto`是在C++引入的类型说明符，用于将表达式的值赋给变量时对表达式的类型进行分析。该说明符根据初始化值对声明的变量进行推断。（auto使编译器运用表达式结果推断述据类型并使用结果初始化变量。一般忽略表达式的指针常量与引用常量，常量指针会保留下来）。使用该说明符，必须给定初始值。
  
```c++
auto var = 1+2;
```
auto会忽略顶层的const,底层const会被保留。之有显示的制定才会确定为顶层const

```c++
const auto var=&i;
```

* `decltype`指定初始值类型推断（只推断类型并不使用结果初始化变量）。

  ```c++
  decltype(<experssion>) var = value;
  decltype((<experssion>)) var = value;   // 引用
  ```

表达式与语句
===========

通常情况下，代码都是以顺序执行的。有表达式语句、空语句以及复合语句

条件语句

函数
====

类
==


标准库
=====

标准库是官方组织提供的库模块

**IO数据流**

IO库是包含基础IO、文件IO以及字符串IO的抽象类型与操作接口，这些抽象类型与接口分别包含在iostream、fstream与sstream三个头文件中。在这些头
文件中IO类型一般都是对char类型数据进行处理，为方便处理wchar_t等宽字节类型，增加以w前缀的IO类型来处理。

这些IO类型的对象是没有拷贝与赋值操作的。并且每一个IO对象都有一个缓冲区。

**顺序容器**

顺序容器为用户提供了元素存储和访问顺序的能力，标准库中提供的顺序容器有vector、deque、list、forward_list、array以及string。

**关联容器**


**泛型算法**

**动态内存**

进程编程
=======

C++的进程编程与C语言类似，都是使用系统调用。

线程编程
=======


