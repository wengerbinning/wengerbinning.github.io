信号是软件中断，提供一种处理异步事件的方法；信号的名称一般都是SIG作为前缀。这些信号都定义在`<signal.h>`中。
产生信号的事件对进程而言是随即出现的，进程对信号的处理有三种方式：忽略信号（SIGKILL与SIGSTOP不能被忽略）、
捕捉信号（SIGKILL与SIGSTOP不能被捕捉）、执行系统默认动作。


```c
void (*signal(int signo, void (*func)(int))) (int);
```

signal函数用于指定捕捉信号的处理函数，通过指定信号量signo，处理该信号的函数指针func，当函数指针为SIG_IGN,
则想内核表示忽略该信号，SIG_DFL，则表示为系统默认动作。如果指定的一个具体的函数，则在信号发生时调用该函数。并
返回一个带int参数的函数指针。

```c
int kill(pid_t pid, int signo);
```

kill函数将信号发送给进程或进程组。当pid<0时，将信号发送给pid绝对值的进程组；当pid=0，将信号发送给当前进程组；
当pid=-1，将信号发送给当前进程能发送的所有进程；当pid>0时，将信号发送给pid的进程。

```c
int raise(int signo);
```

raise函数用于向自身进程发送信号。

```c
unsigned int alarm(unsigned int seconds);
```

alarm函数用于设置一个定时器（闹钟时间），在经过seconds秒之后产生一个SIGALRM信号，每一个进程在同一时刻只能有一个
闹钟时间；当多次设置时，如果上一次还未超时，则返回上一次距离超时还有多少秒；当seconds为0时，取消当前时刻的闹钟时间。

```c
int pause(void);
```

pause函数使当前进程挂起直到捕捉到一个信号 
